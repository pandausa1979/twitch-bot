apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
data:
  init.js: |
    // First create the root user
    db.auth(process.env.MONGO_INITDB_ROOT_USERNAME, process.env.MONGO_INITDB_ROOT_PASSWORD)
    
    // Create a dedicated database for the Twitch bot
    db = db.getSiblingDB('twitchbot')
    
    // Create application user with specific permissions
    db.createUser({
      user: "TwitchBot",
      pwd: process.env.MONGO_APP_PASSWORD,
      roles: [
        {
          role: "readWrite",
          db: "twitchbot"
        }
      ]
    })
    
    // Create initial collections with proper indexes
    db.createCollection("messages")
    db.createCollection("commands")
    db.createCollection("users")
    
    // Create indexes for better performance
    db.messages.createIndex({ "timestamp": 1 })
    db.messages.createIndex({ "channel": 1 })
    db.commands.createIndex({ "name": 1 }, { unique: true })
    db.users.createIndex({ "username": 1 }, { unique: true })

    // Create the twitch bot application user with necessary permissions
    db.createUser({
      user: "twitch_bot_app",
      pwd: passwordPrompt(),  // This will be replaced with the value from MONGO_APP_PASSWORD
      roles: [
        {
          role: "dbOwner",
          db: "admin"  // Allows creation and management of new databases
        }
      ]
    });

    // Create a custom role for managing channel-specific databases
    db.createRole({
      role: "channelDbManager",
      privileges: [
        {
          resource: { db: "", collection: "" },  // Applies to all databases
          actions: [
            "createCollection",
            "createIndex",
            "find",
            "insert",
            "update",
            "remove"
          ]
        }
      ],
      roles: []
    });

    // Grant the custom role to the application user
    db.grantRolesToUser("twitch_bot_app", ["channelDbManager"]); 